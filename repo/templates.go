package repo

const kGeneratedFileWarningComment = `
// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// {{.Timestamp}}
`

const kInterfaceTpl = kGeneratedFileWarningComment + `
package app

import (
	"github.com/Masterminds/squirrel"
)

type {{.Type}}Repository interface {
    GetInsertFields() []string
    GetInsertValues({{.Type}}) []interface{}
    GetSelectDestinations({{.Type}}) []interface{}
    GetSelectFields(alias string) []string
    GetUpdateFields() []string
    GetUpdateValues({{.Type}}) []interface{}
	CreateSelectBuilder(alias string) squirrel.SelectBuilder
}
`

const kImplementationTpl = kGeneratedFileWarningComment + `
package sql

import( 
	"app"
	"database/sql"
)

type {{.Type}} struct {
	DB sql.DB
}

func (r {{.Type}}) GetInsertFields(alias string) []string {
    a := alias
    if a != "" {
        a += "."
    }
    return []string{ {{range .InsertFields}}a+"{{.}}",{{end}} }
}

func (r {{.Type}}) GetInsertValues(m app.{{.Type}}) []interface{} {
    return []interface{}{ {{range .InsertValues}}m.{{.}},{{end}} }
}

func (r {{.Type}}) GetSelectDestinations(m app.{{.Type}}) []interface{} {
	return []interface{}{ {{range .SelectDestinations}}&m.{{.}},{{end}} }
}

func (r {{.Type}}) GetSelectFields(alias string) []string {
    a := alias
    if a != "" {
        a += "."
    }
    return []string{ {{range .SelectFields}}a+"{{.}}",{{end}} }
}

func (r {{.Type}}) GetUpdateFields(alias string) []string {
    a := alias
    if a != "" {
        a += "."
    }
    return []string{ {{range .UpdateFields}}a+"{{.}}",{{end}} }
}

func (r {{.Type}}) GetUpdateValues(m app.{{.Type}}) []interface{} {
    return []interface{}{ {{range .UpdateValues}}m.{{.}},{{end}} }
}
`

const kCrudTpl = kGeneratedFileWarningComment + `
package handler

import(
	"app/render"
	"app/server"
	"github.com/go-chi/chi"
	"net/http"
)

type {{.Type}} struct {
	*chi.Mux
	*server.Server
}

func New{{.Type}}Handler(s *server.Server) *{{.Type}} {
	h := &{{.Type}}{
		Mux:    chi.NewRouter(),
		Server: s,
	}

	h.Get("/", h.read)

	return h
}

func (h {{.Type}}) read(w http.ResponseWriter, r *http.Request) {
	render.JSON(w, "This is read {{.Type}}")
}
`
